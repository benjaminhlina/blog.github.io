---
title: "Animal to movement across a boundary"
author: "Benjamin L. Hlina"
date: "2023-12-06"
image: "01_movement_outside_bnd.png"
categories: [Spatial Analysis, Acoustic Telemetry, Movement]
editor_options: 
  chunk_output_type: inline
---

### Our Objectives

The purpose of the is vignette is to determine when (i.e., time stamps) and how long, an animal takes to cross a boundary (i.e., line or polygon). Specifically we want to identify the nodes on the track that straddle the boundary, and identify the time between nodes. The rational for wanting to determine time spent crossing a boundary could be multiple situations. For example, wanting to estimate the amount of time it took for a fish to migrate into or out of a marine protected area (MPA) using satellite or acoustic telemetry. This vignette was inspired the the following [twitter post](https://twitter.com/spoonbill_hank/status/1731742735453880428) and the initial ideas of how to solve this were inspired by the following [blog post](https://www.jessesadler.com/post/network-analysis-with-r/) focused on network analysis by [Jesse Sadler](https://www.jessesadler.com/), and chunks of code were used from [Shortest Paths Within a Boundary - {pathroutr}](https://blog.benjaminhlina.com/posts/post-with-code/shortest-path-pathroutr/shortest_path_example_pathroutr.html) and functions from [{soapcheckr}](https://github.com/dill/soapcheckr). Another interesting note is that this solution might be able to be solved with functions from [{lwgeom}](https://r-spatial.github.io/lwgeom/) and [{sftime}](https://r-spatial.github.io/sftime/). I don't have much experience using either of those packages but they might provide an easier workflow to answer this problem. 


You can download and unzip this vignette using the following code:

```{r eval = FALSE}
install.packages("usethis")
usethis::use_course("https://github.com/benjaminhlina/find-ts-bnd/archive/refs/heads/master.zip")
```


### load packages, data, and boundary 
We will first load all the packages we need, we will use [{lwgeom}](https://r-spatial.github.io/lwgeom/) to extract `lat` and `lon` of each change in direction and [{sf}](https://r-spatial.github.io/sf/) to find the distances of those shortest paths.
```{r, message = FALSE, warning = FALSE}
{
  library(dplyr)
  library(ggplot2)
  library(here)
  library(lwgeom)
  library(purrr)
  library(readr)
  library(sf)
  make_line <- function(lon, lat, llon, llat) {
    st_linestring(matrix(c(lon, llon, lat, llat), 2, 2,))
  }
}
```

Next we will bring in our example detection data for a single fish that tagged with a satellite telemetry transmitter  
```{r, message = FALSE, warning = FALSE, results = 'hide'}
dat <- read_csv(here("data", 
                     "example_movement_data.csv"))
glimpse(dat)
```

For initial plotting purposes we will transform our detection data into a `sf` object that is a compilation of all the movement into a `LINESTRING`. We will only use `dat_sf` for plotting not manipulation 

```{r}
dat_sf <- dat %>% 
  st_as_sf(coords = c("lon", "lat"), crs = 4326) %>% 
  group_by(id) %>% 
  summarise(do_union = FALSE) %>% 
  st_cast("LINESTRING")
```

Next we will bring in our example MPA shapefile as a `sf` object. For this exercise the boundary needs to be either a `LINESTRING` or `MULTILINESTRING` as `POLYGON` and `MULTIPOLYGON` will not work. 

```{r, message = FALSE, results = 'hide'}
bnd <- st_read(dsn = here("data", 
                          "shapefile", 
                          "."), 
               layer = "example_mpa") %>% 
  st_cast("MULTILINESTRING")
```

### Intial plot of tracks 
We will use [{ggplot2}](https://ggplot2.tidyverse.org/reference/ggplot.html) and `geom_sf()` to initially visualize our tracks. 
```{r}
ggplot() + 
  geom_sf(data = bnd, fill = NA, colour = "blue", linewidth = 1) + 
  geom_sf(data = dat_sf) + 
  theme_void()
```

We can notice that there are few times the fish moves outside the MPA and what we want to know is the location of the two nodes that the fish migrates outside the MPA and the time between the detections to know how long it took the fish to move outside the MPA. 

### Create our from and to data frame     

We need to take the detection data and split it up so that each subsequent detection time stamp, latitude, and longitude are in a separate column. We can do this by using either the `lag()` function from [{dplyr}](https://dplyr.tidyverse.org/) or [{data.table}](https://rdatatable.gitlab.io/data.table/). We will also set the argument `default` to equal `first(variable)` so that when lagging back to the previous value the first time it doesn't create a `NA` value. 

```{r}
to_from <- dat %>% 
  mutate(
    from_ts = dplyr::lag(time_stamp, default = first(time_stamp)),
    to_ts = time_stamp,
    llat = dplyr::lag(lat, default = first(lat)),
    llon = dplyr::lag(lon, default = first(lon)),
  ) %>% 
  dplyr::select(-time_stamp)
```

### Create our tracks for each change in direction 
Now that we have our to and from dataframe we are going to select the from and to's lat and lons and make each movement a linestring using the supplied function above `make_line()`. We will then convert that into a complied `sf` object and extract the lons from the to and from portions of the `LINESTRING` using `st_startpoint()` and `st_endpoint()` from [{lwgeom}](https://r-spatial.github.io/lwgeom/). We will add this as a column to our `sf` object and transform it to a `character` because the next step involves `left_join()` from [{dplyr}](https://dplyr.tidyverse.org/) which cannot join based on a double precision numeric. 
```{r}
tracks_sf <- to_from %>%
  dplyr::select(lon, lat, llon,llat) %>% 
  pmap(make_line) %>%
  st_as_sfc(crs = 4326) %>%
  st_sf() %>% 
  mutate(
    lon = st_startpoint(.) %>%
      st_coordinates(.) %>%
      as_tibble() %>%
      .$X %>% 
      as.character(),
    llon = st_endpoint(.) %>%
      st_coordinates(.) %>%
      as_tibble() %>%
      .$X %>% 
      as.character()
  )
```

### Join our tracks to our from and to timestamps 
First we need to make sure our to and from lons and lats are characters otherwise `left_join()` will not work. We will also select the columns we only need to join.  
```{r}
to_from_select <- to_from %>% 
  mutate(across(.cols = c(lon, lat, llon, llat), as.character)) %>% 
  dplyr::select(id, lon, llon, from_ts, to_ts)
```

Next we will `left_join()` our tracks `sf` object and our time stamps and fish id
lastly we will drop the `lon` and `llon` columns as we no longer need them in our `sf` object 
```{r}
tracks_sf <- tracks_sf %>% 
  left_join(to_from_select,
            by = c("lon", "llon")) %>% 
  dplyr::select(-c("lon", "llon"))
```

### Determine which movments fall outside boundary 

We can use a `st_intersects()` with the `sparse` argument set to `FALSE` which will produce a matrix of `TRUE` or `FALSE` depending on whether it intersects the boundary. To return a vector we add the `[TRUE]` at the end of the call of `st_intersects()`  

```{r}
tracks_sf <- tracks_sf %>% 
  mutate(
    x_bnd = st_intersects(bnd, tracks_sf, sparse = FALSE)[TRUE]
  )
```

Congratulations we now have a column of `TRUE/FALSE` that lets us know whether or not the fish crossed the boundary. 

We can then filter out any movement that didn't cross the boundary. 
```{r}
tracks_sf_x <- tracks_sf %>% 
  filter(x_bnd %in% TRUE)
```

### Plotting tracks that cross the boundary 
We can use [{ggplot}](https://ggplot2.tidyverse.org/reference/ggplot.html) or [{mapview}](https://r-spatial.github.io/mapview/) to view when the fish moved across the boundary. [{mapview}](https://r-spatial.github.io/mapview/) is nice to create an interactive plot for exploration but for any type of publication or report you'll more than likely need a static figure. 

```{r}
ggplot() + 
  geom_sf(data = bnd, colour = "blue", size = 1, fill = NA) + 
  geom_sf(data = tracks_sf_x) +
  theme_void()
```

### Cacluate time it took to cross the boundary 

we can use the base function `difftime()` to get the time difference between our from and to detections to the know how long it took the fish migrate across the boundary. 
```{r}
tracks_sf_x <- tracks_sf %>% 
  mutate(
    time_diff = difftime(to_ts, from_ts)
  )
```

You will notice that the difference in time is consistent as the example dataset use a manufactured sequence I created that is equally spaced. In your dataset this column should vary. 