[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Blog",
    "section": "",
    "text": "Shortest Paths Within a Boundary - {Pathroutr}\n\n\n\n\n\n\n\ncode\n\n\ntelemetry\n\n\nmovement\n\n\n\n\n\n\n\n\n\n\n\nMay 28, 2023\n\n\nBenjamin Hlina\n\n\n\n\n\n\n  \n\n\n\n\nShortest Paths Within a Boundary - {gdistance}\n\n\n\n\n\n\n\ncode\n\n\ntelemetry\n\n\nmovement\n\n\n\n\n\n\n\n\n\n\n\nMay 26, 2023\n\n\nBenjamin Hlina\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/post-with-code/shortest-path-gidstance/shortest_path_example_gdistance.html",
    "href": "posts/post-with-code/shortest-path-gidstance/shortest_path_example_gdistance.html",
    "title": "Shortest Paths Within a Boundary - {gdistance}",
    "section": "",
    "text": "Our Objectives:\nThe purpose of this vignette is to create the shortest distance among acoustic telemetry receivers within a confined boundary such as a lake, river, delta, or oceanscape. This workflow can be adapted to find the distance between any two points within a confined boundary.\nYou can download and unzip this vignette using the following code:\n\ninstall.packages(\"usethis\")\nusethis::use_course(\"https://github.com/benjaminhlina/shortest_path_example/archive/refs/heads/master.zip\")\n\n\n\nStep 1: Load shapefile and receiver locations\nWe will first load all the packages we need, we will use {gdistance} to find the shortest paths, {sf} to find the distances of those shortest paths.\n\n# ---- load packages ----\n{\n  library(dplyr)\n  library(gdistance)\n  library(ggplot2)\n  library(here)\n  library(purrr)\n  library(raster)\n  library(readr)\n  library(sf)\n  library(sp)\n  library(tibble)\n  library(tidyr)\n  make_line &lt;- function(lon, lat, llon, llat) {\n    st_linestring(matrix(c(lon, llon, lat, llat), 2, 2))\n  }\n}\n\nWe will bring bring in our shapefile. This vignette will use Big Sissabagama Lake as it is the lake I grew up fishing on in Wisconsin, USA. Please replace with the shapefile of your desired body of water.\n\nlake &lt;- st_read(dsn = here(\"Data\",\n                           \"shapefile\",\n                           \".\"),\n                layer = \"sissabagama_lake\")\n\nImportant that you convert to the correct UTM zone. For the vignette we are using UTM zone 15 N. Adjust your UTM zone accordingly.\n\nlake_utm &lt;- st_transform(lake, crs = 32615)\n\nCreate SpatialPloygonDataFrame we will use it to create a raster that will be a transition layer for paths to move across. We will use lake_utm as we need our raster layer in UTMs.\n\nlake_spd &lt;- as_Spatial(lake_utm)\n\nWe will then bring in our receiver locations. Replace rl_sum_sf with your receiver locations as a RDS or csv file type or whatever you use to document receiver locations.\n\nrl_sum_sf &lt;- read_rds(here(\"Data\",\n                           \"receiver locations\",\n                           \"rl_sum_sf.rds\"))\n\nConvert to UTMs for plotting purposes and make sure you use the correct UTM zone.\n\nrl_sum_utm &lt;- st_transform(rl_sum_sf, crs = 32615)\n\n\n\nStep 2: Rasterize shapefile\nWe will look at lake SpatialPointsDataFrame via plot, then determine the boundary box (bbox) and save it as an object named ext.\n\nplot(lake_spd)\n\n# determine the extent of the SpatialPointsDataFrame\next &lt;- extent(lake_spd)\n\n\nThen we will create the raster, it is important here to control the res argument as that will result in varied resolution. For the vignette I used a resolution of 5 which represents 5 m since we are using UTMs. Using a more fine-scale resolution such as 5 m can be computationally intensive so for large systems scale this value up.\n\ns &lt;- raster(lake_spd, res = 5)\n# remove and change NA values to fit within the extent\ns &lt;- rasterize(x = lake_spd, y = s, field = 1)\n\n# plot raster to make sure it looks appropriate\nplot(s)\n\n\nThe last step is to create the transition layer. Directions will be queens move of 16 spaces. If in a larger systems direction could be reduced from queens space to rook or king, 4 or 8 to reduce computational complexity and speed.\n\ntrans &lt;- transition(x = s, transitionFunction = mean, directions = 16)\n\n\n\nStep 3: Create every combination of paths for every receiver\nFirst we will convert receiver location which is a sf object to a tibble with each location combination.\n\nprep_path &lt;- rl_sum_sf %&gt;%\n  mutate(\n    lon = st_coordinates(.)[,\"X\"],# grab lon\n    lat = st_coordinates(.)[,\"Y\"],# grab lat\n  ) %&gt;%  \n  st_drop_geometry() %&gt;% # drop sf \n  # once geometry removed create to and from lat longs \n  mutate(llon = lon,\n         llat = lat,\n         lonlat = paste0(lon, \",\", lat),\n         llonllat = paste0(llon, \",\", llat)) %&gt;%\n  dplyr::select(-lon, -lat, -llon, -llat) %&gt;%\n  expand(lonlat, llonllat) %&gt;% # expand for each to and from combo \n  separate(lonlat, c(\"lon\", \"lat\"), \",\") %&gt;%\n  separate(llonllat, c(\"llon\", \"llat\"), \",\") %&gt;%\n  mutate_if(is.character, function(x) as.numeric(x)) \n\nprep_path has all of the path combinations but we lose the names of the receivers and which paths go from one receiver to another. We are going to add that information back in by creating an object called rec_order\n\nrec_order &lt;- prep_path %&gt;%\n  left_join( \n    rl_sum_sf %&gt;% \n      mutate(\n        lon = st_coordinates(.)[,\"X\"], # grab lon \n        lat = st_coordinates(.)[,\"Y\"]  # grab lat \n      ) %&gt;% \n      st_drop_geometry() %&gt;% # remove sf \n      rename(from = rec_name) %&gt;%  # Line up from names \n      dplyr::select(from, lon, lat), by = c(\"lon\", \"lat\"), \n    multiple = \"all\"\n  ) %&gt;%  \n  left_join(\n    rl_sum_sf %&gt;% \n      mutate(\n        lon = st_coordinates(.)[,\"X\"]\n      ) %&gt;% \n      st_drop_geometry() %&gt;% \n      rename(to = rec_name,\n             llon = lon) %&gt;% # join for the tos  \n      dplyr::select(to, llon), by = c(\"llon\"), \n    multiple = \"all\"\n  ) %&gt;% \n  mutate(\n    from_to = paste0(from, \"-\", to), \n    id = 1:nrow(.)\n  ) %&gt;% \n  dplyr::select(id, from, to, from_to, lon, lat, llon, llat)\n\nAwesome! We have all of our combinations with their names and we now know which paths go from one receiver to another. The only issue is all of points are in decimal degrees with a CRS of WGS 84, we need to convert this into to UTMs.\nBe sure to choose the correct UTM zone here. This vignette uses UTM zone 15 north but for other uses you will have to change the UTM zone.\n\nrec_order_utm &lt;- st_as_sf(rec_order, \n                          coords = c(\"lon\", \"lat\"), \n                          crs = st_crs(rl_sum_sf)) %&gt;% \n  st_transform(crs = 32615) %&gt;% \n  mutate(\n    lon = st_coordinates(.)[,\"X\"], # grab lon \n    lat = st_coordinates(.)[,\"Y\"]  # grab lat \n  ) %&gt;% \n  st_drop_geometry() %&gt;% \n  st_as_sf(., coords = c(\"llon\", \"llat\"), \n           crs = st_crs(rl_sum_sf)) %&gt;% \n  st_transform(crs = 32615) %&gt;% \n  mutate(\n    llon = st_coordinates(.)[,\"X\"], # grab lon \n    llat = st_coordinates(.)[,\"Y\"]  # grab lat \n  ) %&gt;% \n  st_drop_geometry()\n\n\n\nStep 4: Make shortest paths\nWe will first split our combinations into individual end points, then use purrr::map() to iterate over each combination and use the shortestPath() function to calculate the shortest path for every combination.\nWe then will transform the output of this which are SpatialLinesDataFrame to sf objects. Important note here is to change the CRS to your specific CRS UTM zone.\n\nrec_dist_sf &lt;- rec_order_utm %&gt;%\n  split(.$id) %&gt;%\n  map(possibly(~ shortestPath(trans,\n                              c(.$llon, .$llat),\n                              c(.$lon, .$lat),\n                              output = \"SpatialLines\"), NA)) %&gt;%\n  map(possibly(~ st_as_sf(., crs = 32615), NA)) %&gt;% # u will need to replace CRS\n  bind_rows(.id = \"id\") %&gt;%\n  mutate(\n    cost_dist = as.numeric(st_length(.))\n  )\n\n\n\nStep 5: Add in metadata of paths start and end desitantions\nFirst we will change the id column to a character to be able to line up the data properly.\n\nrec_order_names &lt;- rec_order_utm %&gt;% \n  mutate(\n    id = as.character(id)\n  )\n\nNext we will use left_join() from {dplyr} to connect each path’s metadata.\n\nrec_dist_sf &lt;- rec_dist_sf %&gt;% \n  left_join(rec_order_names, by = \"id\") %&gt;% \n  dplyr::select(id, from:llon, cost_dist, geometry)\n\n\n\nStep 6: Plot\nWe will use ggplot to look at our paths. Lets first check if paths go to the right locations and then we will plot the whole thing.\n\nggplot() +\n  geom_sf(data = lake_utm) +\n  geom_sf(data = rec_dist_sf %&gt;% \n            filter(from_to %in% \"3-12\")\n          , aes(colour = cost_dist), size = 1) +\n  geom_sf_label(data = rl_sum_utm , size = 4, aes(label = rec_name)) +\n  scale_colour_viridis_c(name = \"Cost Distance (m)\", option = \"B\") +\n  theme_void()\n\n\n\nggplot() +\n  geom_sf(data = lake_utm) +\n  geom_sf(data = rec_dist_sf, aes(colour = cost_dist), size = 1) +\n  geom_sf(data = rl_sum_utm , size = 4) +\n  scale_colour_viridis_c(name = \"Cost Distance (m)\", option = \"B\") +\n  theme_void()\n\n From here the sf object can be kept together or ripped apart to determine the distance or path a fish could swim within the system along with a whole host of other potential implications (e.g. interpolated paths).\nCredit: R. Lennox, PhD, Incoming Science Director - OTN for the original ideas around this script."
  },
  {
    "objectID": "posts/post-with-code/shortest-path-pathroutr/shortest_path_example_pathroutr.html",
    "href": "posts/post-with-code/shortest-path-pathroutr/shortest_path_example_pathroutr.html",
    "title": "Shortest Paths Within a Boundary - {Pathroutr}",
    "section": "",
    "text": "Our Objectives:\nThe purpose of this vignette is to create the shortest distance among acoustic telemetry receivers within a confined boundary such as a lake, river, delta, or oceanscape. This workflow can be adapted to find the distance between any two points within a confined boundary.\nUse this vignette with a bit of caution, as I found some inconsistency with this method when transferring it to other study systems besides this example study system.\nNote, this method differs from the {gdistance} method as we are going to create a network graph to move throughout our study system and determine the shortest path. This vignette will start off the same as the {gdistance} method but will differ when creating the shortest paths.\nYou can download and unzip this vignette using the following code:\n\ninstall.packages(\"usethis\")\nusethis::use_course(\"https://github.com/benjaminhlina/shortest_path_example/archive/refs/heads/master.zip\")\n\n\n\nStep 1: Load shapefile and receiver locations\nWe will first load all the packages we need, we will use {pathroutr} to find the shortest paths using {sfnetworks} and {sf} to find the distances of those shortest paths.\n\n# ---- load packages ----\n{\n  library(dplyr)\n  library(ggplot2)\n  library(ggspatial)\n  library(here)\n  library(igraph)\n  library(lwgeom)\n  library(pathroutr)\n  library(purrr)\n  library(readr)\n  library(sf)\n  library(sfnetworks)\n  library(sp)\n  library(tibble)\n  library(tidyr)\n  make_line &lt;- function(lon, lat, llon, llat) {\n    st_linestring(matrix(c(lon, llon, lat, llat), 2, 2))\n  }\n}\n\nWe will bring bring in our shapefile. This vignette will use Big Sissabagama Lake as it is the lake I grew up fishing on in Wisconsin, USA. Please replace with the shapefile of your desired body of water.\n\nlake &lt;- st_read(dsn = here(\"Data\",\n                           \"shapefile\",\n                           \".\"),\n                layer = \"sissabagama_lake\")\n\nImportant that you convert to the correct UTM zone. For the vignette we are using UTM zone 15 N. Adjust your UTM zone accordingly.\n\nlake_utm &lt;- st_transform(lake, crs = 32615)\n\nWe will then bring in our receiver locations. Replace rl_sum_sf with your receiver locations as a RDS or csv file type or whatever you use to document receiver locations.\n\nrl_sum_sf &lt;- read_rds(here(\"Data\",\n                           \"receiver locations\",\n                           \"rl_sum_sf.rds\"))\n\nConvert to UTMs for plotting purposes and make sure you use the correct UTM zone.\n\nrl_sum_utm &lt;- st_transform(rl_sum_sf, crs = 32615)\n\n\n\nStep 2: Invert shapefile for inland lakes and rivers\n{pathroutr} was built with the intent of working on oceansacpes where the shapefile is land. For inland bodies of water the shapefile is usually water, therefore to get {pathroutr} to function we need to invert our inland lake or river shapefile\nFirst we are going to get the extent of our shapefile which will be in UTMs\n\next &lt;- st_bbox(lake_utm, crs = st_crs(lake_utm)) %&gt;%\n  st_as_sfc() %&gt;%\n  st_sf()\n\nWe then will invert our shapefile by using st_difference() from {sf}.\n\ninverse &lt;- st_difference(ext, lake_utm)\n\nWe will check if we have correctly taken the inverse of our lake.\n\nggplot() +\n  geom_sf(data = inverse) + \n  theme_void()\n\n\n\n\nStep 3: Create land region to build our network\nWe need to create a buffered land region to use as a barrier. Within st_buffer() we will need to adjust dist argument to change the buffer distance to be adequate for the study system. For this example we will use 650 m.\n\nland_region &lt;- rl_sum_utm %&gt;% \n  st_buffer(dist = 650) %&gt;%\n  st_union() %&gt;%\n  st_convex_hull() %&gt;% \n  st_intersection(inverse) %&gt;% \n  st_sf()\n\nWe will check if we have correctly buffered our land region\n\nggplot() +\n  geom_sf(data = land_region) + \n  theme_void()\n\n\n\n\nStep 4: Create every combination of paths for every receiver\nFirst we will convert receiver location which is a sf object to a tibble with each location combination.\n\nprep_path &lt;- rl_sum_sf %&gt;%\n  mutate(\n    lon = st_coordinates(.)[,\"X\"],# grab lon\n    lat = st_coordinates(.)[,\"Y\"],# grab lat\n  ) %&gt;%  \n  st_drop_geometry() %&gt;% # drop sf \n  # once geometry removed create to and from lat longs \n  mutate(llon = lon,\n         llat = lat,\n         lonlat = paste0(lon, \",\", lat),\n         llonllat = paste0(llon, \",\", llat)) %&gt;%\n  dplyr::select(-lon, -lat, -llon, -llat) %&gt;%\n  expand(lonlat, llonllat) %&gt;% # expand for each to and from combo \n  separate(lonlat, c(\"lon\", \"lat\"), \",\") %&gt;%\n  separate(llonllat, c(\"llon\", \"llat\"), \",\") %&gt;%\n  mutate_if(is.character, function(x) as.numeric(x)) \n\nprep_path has all of the path combinations but we lose the names of the receivers and which paths go from one receiver to another. We are going to add that information back in by creating an object called rec_order\n\nrec_order &lt;- prep_path %&gt;%\n  left_join(\n    rl_sum_sf %&gt;% \n      mutate(\n        lon = st_coordinates(.)[,\"X\"], \n        lat = st_coordinates(.)[,\"Y\"]\n      ) %&gt;% \n      st_drop_geometry() %&gt;% \n      rename(from = rec_name) %&gt;% \n      select(from, lon, lat), by = c(\"lon\", \"lat\"), \n    multiple = \"all\"\n  ) %&gt;%  \n  left_join(\n    rl_sum_sf %&gt;% \n      mutate(\n        lon = st_coordinates(.)[,\"X\"]\n      ) %&gt;% \n      st_drop_geometry() %&gt;% \n      rename(to = rec_name,\n             llon = lon) %&gt;% \n      select(to, llon), by = c(\"llon\"), \n    multiple = \"all\"\n  ) %&gt;% \n  mutate(\n    from_to = paste0(from, \"-\", to)\n  ) %&gt;% \n  select(from, to, from_to, lon, lat, llon, llat)\n\nAwesome! We have all of our combinations with their names and we now know which paths go from one receiver to another. Now we need to make each combination a linestring that we will sample points from to reroute.\nBe sure to choose the correct UTM zone here. This vignette uses UTM zone 15 north but for other uses you will have to change the UTM zone.\n\npath &lt;- prep_path %&gt;%\n  pmap(make_line) %&gt;%\n  st_as_sfc(crs = 4326) %&gt;%\n  st_sf() %&gt;%  \n  mutate(\n    lon = st_startpoint(.) %&gt;%\n      st_coordinates(.) %&gt;%\n      as_tibble() %&gt;%\n      .$X,\n    llon = st_endpoint(.) %&gt;%\n      st_coordinates(.) %&gt;%\n      as_tibble() %&gt;%\n      .$X\n  ) %&gt;% \n  left_join( rec_order %&gt;%\n               select(from:lon, llon),\n             by = c(\"lon\", \"llon\")\n  ) %&gt;%\n  select(from:from_to) %&gt;% \n  st_transform(crs = 32615) %&gt;% \n  arrange(from, to)\n\n\n\nStep 5: sample points along path for {pathroutr} to reroute\nNow that we have our paths we need to sample along the LINESTRING to get paths to reroute. I choose to have a sample distance of 5 m but you can change this depending on the study site.\nWe need to cast our sampled points as MULTIPOINT object for {pathroutr} to sample\n\npath_pts &lt;- path %&gt;% \n  st_segmentize(dfMaxLength = units::set_units(5, m)) %&gt;% \n  st_cast(\"MULTIPOINT\")\n\nImportant note, sometimes this sampling step results in points that intersect with the boundary of your land region which may cause issues with {pathroutr}. To fix this you will need to use the following code:\n\npath_pts_fix &lt;- prt_trim(trkpts = path_pts, barrier = land_region)\n\nThough for this vignette we will not use path_pts_fix.\nWe are going to visualize our paths, we could visualize the path_pts but this often takes awhile to process as the sample interval is 5 m and path_pts will be taken from our paths\n\nggplot() + \n  geom_sf(data = land_region)  +\n  geom_sf_label(data = rl_sum_sf, aes(label = rec_name), \n                size = 4) +\n  geom_sf(data = path, linewidth = 1) + \n  theme_void()\n\n\n\n\nStep 6: Use get_barrier_segments from {pathroutr} to id path points that travel across landmasses in our lake.\n\nlake_bar_seg &lt;- get_barrier_segments(trkpts = path_pts,\n                                     barrier =  land_region)\n\n\n\nStep 7: Create network graph in our study system\nCreate a network graph that is bound by land_region and made up Delaunay triangles which are created in theory by looking directly across the study system until you hit land.\n\nvis &lt;- prt_visgraph(barrier = land_region)\n\nWe can manipulate our network graph in several ways, the first is supplying the argument aug_points with the receiver location sf object. By doing so we add in triangles that will directly go to our receiver locations. However if you want to use this feature please install the forked version of {pathroutr} using the following code, as the original source currently does not support this feature.\n\ndevtools::install_github(\"benjaminhlina/pathroutr\")\n\nSecondly, we can use the argument centroids to add additional points within our network.\nLastly, we can use the argument buffer to have paths be buffered from our land masses by a given distance in metres. We can visualize our network by first using the function activate from{sfnetworks}`.\n\nvis_graph_sf &lt;- activate(vis, \"edges\") %&gt;% \n  st_as_sf()\n\nggplot() + \n  geom_sf(data = vis_graph_sf) + \n  theme_void()\n\n\n\n\nStep 8: Create rerouted sections\nUsing prt_shortestpath we will reroute sections that go across land using our created network.\n\nsegs_tbl &lt;- prt_shortpath(lake_bar_seg, vis, blend = TRUE)\n\nWe can visualize these rerouted paths\n\nggplot() + \n  geom_sf(data = land_region, size = 0) +\n  layer_spatial(data = segs_tbl$geometry, \n                color = \"deepskyblue3\",\n                linewidth = 1) +\n  theme_void()\n\n ### Step 9: Update our paths to not travel across land\n\ntrack_pts_fix &lt;- prt_reroute(path_pts, land_region, vis)\n\ntrack_pts_fix &lt;- prt_update_points(track_pts_fix, path_pts)\n\n\n\nStep 10: Convert points to linestrings to determine distance\n\ntrack_pts_fixed &lt;- track_pts_fix %&gt;% \n  group_by(from_to) %&gt;% \n  summarise(do_union = FALSE) %&gt;% \n  st_cast('LINESTRING') %&gt;%  \n  ungroup() %&gt;% \n  separate(from_to, into = c(\"from\", \"to\"), sep = \"-\", \n           remove = FALSE) %&gt;% \n  mutate(\n    cost_dist_m = as.numeric(st_length(.))\n  ) %&gt;% \n  filter(from != to) %&gt;% \n  dplyr::select(from, to, from_to, cost_dist_m, geometry)\n\n\n\nStep 11: Visualize our paths\nFirst we will check if one route rerouted properly\n\n# view one reroute to confirm pathroutr is rerouting \ntrack_pts_fixed %&gt;% \n  filter(from_to == \"15-11\") %&gt;% \n  ggplot() + \n  geom_sf(data = land_region, size = 0) +\n  geom_sf(color = \"deepskyblue3\", \n          linewidth = 1) +\n  theme_void()\n\n\nNext we will visualize the whole network and have colour be our distances\n\nggplot() + \n  geom_sf(data = lake_utm, colour = \"black\",\n          size = 1) +\n  geom_sf(data = rl_sum_utm, \n          size = 4, colour = \"black\") + \n  geom_sf(data = track_pts_fixed, \n          aes(color = cost_dist_m), \n          linewidth = 1) +\n  scale_colour_viridis_c(option = \"D\", \n                         name = \"Cost Distance (m)\") + \n  theme_void()"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "I am a fisheries scientist and programmer currently based at the Fish Ecology and Conservation Physiology Laboratory, Carleton University, Ottawa, ON, CA. This blog is an extension of my website and is where I host vignettes mostly in R on a wide range of topics mostly focused on data applications for aquatic scientist."
  }
]