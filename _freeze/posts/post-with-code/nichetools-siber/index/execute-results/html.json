{
  "hash": "80c21058b83c8e7665daf62d08dbc94c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"How to use {nichetools} with SIBER\"\nauthor: \"Benjamin L. Hlina\"\ndate: \"2024-08-29\"\nimage: \"SIBER_layman_ggplot.png\"\ncategories: [Stable Isotopes, Trophic Dynamics, Food Webs]\neditor_options: \n  chunk_output_type: inline\n---\n\n\n### Our Objectives\n\nThe purpose of this vignette is to use [{SIBER}](https://cran.r-project.org/package=SIBER) and [{nichetools}](https://benjaminhlina.github.io/nichetools/) to extract and then visualize estimates of trophic niche size and similarities and Layman community metrics for multiple freshwater fish using [{ggplot2}](https://ggplot2.tidyverse.org/). \n\nThis vignette can be used for additional purposes including estimating niche size and similarities among different groups of aquatic and/or terrestrial species. Furthermore, niche size and similarities for different behaviours exhibited within a population can be made using behavioural data generated from acoustic telemetry (e.g., differences in habitat occupancy).\n\n### Bring in trophic data\nFirst we will load the necessary packages to preform the analysis and visualization. We will use [{SIBER}](https://cran.r-project.org/package=SIBER) and [{nichetools}](https://benjaminhlina.github.io/nichetools/) to preform the analysis. We will use [{bayestestR}](https://easystats.github.io/bayestestR/) to calculate and extract  medians and Equal-Tailed Interval (ETI) of posterior distributions that we want to plot. We will use [{dplyr}](https://dplyr.tidyverse.org/), [{tidyr}](https://tidyr.tidyverse.org/), and [{purrr}](https://purrr.tidyverse.org/) to manipulate data and iterate processes. Lastly, we will use [{ggplot2}](https://ggplot2.tidyverse.org/), [{ggtext}](https://wilkelab.org/ggtext/), and [{ggdist}](https://mjskay.github.io/ggdist/) to plot and add labels.\n\nI will add that many of the `{dplyr}` and `{tidyr}` functions and processes can be replaced using [{data.table}](https://CRAN.R-project.org/package=data.table) which is great when working with large data sets.\n\nWe will first load the packages that were just mentioned \n\n::: {.cell}\n\n```{.r .cell-code}\n{\n  library(bayestestR)\n  library(dplyr)\n  library(ggplot2)\n  library(ggdist)\n  library(ggtext)\n  library(nichetools)\n  library(purrr)\n  library(SIBER)\n  library(tidyr)\n  library(viridis)\n}\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'nichetools' was built under R version 4.4.1\n```\n\n\n:::\n:::\n\nFor the purpose of the vignette we will be using the `demo.siber.data.2` data frame that is available within `{SIBER}`. We will first look at the structure of this data frame using the `{dplyr}` function `glimpse()`. For your purposes you will need to replace this with your data frame either by loading a csv, rds, or qs file. You can do this multiple ways, I prefer using `readr::read_csv()` for a csv but base R's `read.csv()` works perfectly fine. Note, `{SIBER}` functions do not take `tibbles` or `data.tables` so you will have to convert either to `data.frame` class prior to running functions in `{SIBER}`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(demo.siber.data.2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 150\nColumns: 4\n$ iso1      <dbl> -11.048902, -8.809360, -9.256212, -8.380952, -10.401561, -7.…\n$ iso2      <dbl> 1.02044315, 1.97597511, 3.28707260, -1.95750266, -3.11949113…\n$ group     <chr> \"city\", \"city\", \"city\", \"city\", \"city\", \"city\", \"city\", \"cit…\n$ community <chr> \"dublin\", \"dublin\", \"dublin\", \"dublin\", \"dublin\", \"dublin\", …\n```\n\n\n:::\n:::\n\n\nYou will notice that the community and group column are character strings that are the actual names of the communities and groups. I advise changing them into factors, thus allow you to know the order for each column prior to converting them into a `numeric` and then a `charcter`. The reason why this is important, is that functions in `{SIBER}` use `for` loops based on the indexing of the `SiberObject`. If this order does not match up you can have issues with the names of the communities and groups you are working with.\n\nLet us change these into a `factor`, then preserve the column and create an id column that is the numerical order that will become the community and group names provided to `createSiberObject()`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndemo.siber.data.2 <- demo.siber.data.2 %>%\n  mutate(\n    group = factor(group), \n    community = factor(community), \n    group_id = as.numeric(group) %>% \n      as.character(),\n    community_id = as.numeric(community) %>%\n      as.character()\n  ) %>% \n  rename(\n    group_name = group,\n    community_name = community,\n    group = group_id,\n    community = community_id\n  )\n\nglimpse(demo.siber.data.2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 150\nColumns: 6\n$ iso1           <dbl> -11.048902, -8.809360, -9.256212, -8.380952, -10.401561…\n$ iso2           <dbl> 1.02044315, 1.97597511, 3.28707260, -1.95750266, -3.119…\n$ group_name     <fct> city, city, city, city, city, city, city, city, city, c…\n$ community_name <fct> dublin, dublin, dublin, dublin, dublin, dublin, dublin,…\n$ group          <chr> \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", …\n$ community      <chr> \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", …\n```\n\n\n:::\n:::\n\n\nAfter we have done this, we are going to create two data frames that are the names of our communities and groups with their associated id values. We will use these data frames later on to join up the actual names, allowing us to know what estimates belong to which communities and groups. We are doing this because it is unlikely you will have communities and groups named 1, 2, 3 ect. and instead will have actual names. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ---- create name with group and community data frame ----\ncg_names <- demo.siber.data.2 %>%\n  distinct(group,\n           community, \n           group_name, \n           community_name) %>%\n  \n  arrange(community, group)\n\n# ---- create community names data frame ---- \nc_names <- demo.siber.data.2 %>% \n  distinct(community, \n           community_name) %>%\n  arrange(community)\n```\n:::\n\nWe will then plot our biplot to confirm we have the correct structure. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = demo.siber.data.2, aes(x = iso1, y = iso2,\n                                     colour = group_name)) +\n  geom_point() +\n  facet_wrap(~ community_name) + \n  scale_colour_viridis_d(option = \"A\", begin = 0.25, end = 0.85,\n                         name = \"Groups\", alpha = 0.75) + \n  theme_bw(\n    base_size = 15\n  ) + \n  theme(\n    strip.background = element_blank(),\n    panel.grid = element_blank(), \n    axis.title = element_markdown(),\n    legend.position = \"inside\",\n    legend.position.inside = c(0.65, 0.75)\n  ) + \n  labs(\n    x = paste0(\"\\U03B4\",\"<sup>\", 13, \"</sup>\", \"C\", \" (‰)\"),\n    y = paste0(\"\\U03B4\",\"<sup>\", 15, \"</sup>\", \"N\", \" (‰)\")\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=100%}\n:::\n:::\n\n\nNext we will grab the isotopes we need and the community and group ids that have already been renamed  to `community` and `group`. This is important as `creatSiberObject()` will 1) only take the following order with the following names `iso1`, `iso2`, `group`, and `community` and 2) we will transform this `tibble` into a `data.frame` as `{SIBER}` will only work with a `data.frame`. In this case we were using `tibbles` but we could also be working with `data.table` and will need to do the same thing. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndemo_siber_data <- demo.siber.data.2 %>% \n  dplyr::select(iso1, iso2, group, community) %>%\n  arrange(community, group) %>% \n  as.data.frame() \n```\n:::\n\n\n### Convert to {SIBER} object\n\nFirst convert to our isotope data into a `{SIBER}` object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsiber_example <- createSiberObject(demo_siber_data)\n```\n:::\n\n\nNow that this is a `{SIBER}` object we can start doing some analysis using a \nfrequentist (e.g., maximum-likelihood) or a Bayesian framework. The data and metrics generated through this analysis by `{SIBER}` can be extracted using functions in `{nichetools}`. \n\n### Bayesian Ellipse Analysis \n\nWe first need to set the parameters to run the model \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# options for running jags\nparms <- list()\nparms$n.iter <- 2 * 10^4   # number of iterations to run the model for\nparms$n.burnin <- 1 * 10^3 # discard the first set of values\nparms$n.thin <- 10     # thin the posterior by this many\nparms$n.chains <- 2        # run this many chains\n```\n:::\n\n\nNext we need to define the priors for each parameter of the model. This includes fitting the ellipses using an Inverse Wishart prior on the covariance matrix ($\\Sigma$), and a vague normal prior on the means ($\\mu$).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# fit the ellipses which uses an Inverse Wishart prior on the \n# covariance matrix Sigma, and a vague normal prior on the \n# means.\npriors <- list()\npriors$R <- 1 * diag(2)\npriors$k <- 2\npriors$tau.mu <- 1.0E-3\n```\n:::\n\n\nWe will now run the model using the function `siberMVN()`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nellipses_posterior <- siberMVN(siber_example, parms, priors)\n```\n:::\n\n\n### Extract posterior distributions for μ and Σ\n\nWe will first extract posterior distribution for $\\mu$ using `extract_mu()` in `{nichetools}`. We will need to set the argument `pkg` to `\"SIBER\"` and the argument `data_format` to `\"wide\"`. This argument takes `\"long\"` or `\"wide\"` which dictates whether the data object returned is in wide or long format. We will also use the function `seperate_wider_delim()` from `{tidyr}` to separate the community and groups names as they are joined by a `.`. We then will use `left_join()` and the `cg_names` data frame we created above to add in the correct community and group names. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_mu <- extract_mu(ellipses_posterior, pkg = \"SIBER\", \n                    data_format = \"wide\") %>%\n  separate_wider_delim(sample_name, cols_remove = FALSE,\n                       delim = \".\", names = c(\"community\",\n                                              \"group\")) %>%\n  left_join(cg_names)\n```\n:::\n\n\nWe can confirm that the posterior estimates of $\\mu$ are correct by plotting them with {ggplot2}.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_point(data = df_mu, aes(x = d13c, y = d15n,\n                               colour = group_name)) +\n  geom_point(data = demo.siber.data.2, aes(x = iso1, y = iso2,\n                                           colour = group_name)) +\n  facet_wrap( ~ community_name) + \n  scale_colour_viridis_d(option = \"A\", begin = 0.25, end = 0.85,\n                         name = \"Groups\", alpha = 0.75) + \n  theme_bw(\n    base_size = 15\n  ) + \n  theme(\n    strip.background = element_blank(),\n    panel.grid = element_blank(), \n    axis.title = element_markdown(),\n    legend.position = \"inside\",\n    legend.position.inside = c(0.65, 0.75)\n  ) + \n  labs(\n    x = paste0(\"\\U03B4\",\"<sup>\", 13, \"</sup>\", \"C\", \" (‰)\"),\n    y = paste0(\"\\U03B4\",\"<sup>\", 15, \"</sup>\", \"N\", \" (‰)\")\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=100%}\n:::\n:::\n\n\nNotice the density of points in the center of the raw data for the corresponding colours. This density of points are the posterior estimates from the model for $\\mu$ and are an indication that the model is iterating over the groups and communities correctly.  \n\nWe are also going to extract $\\mu$ in long format for creating ellipse, as the function that create ellipse needs the data frame of $\\mu$ to be in long format. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_mu_long <- extract_mu(ellipses_posterior, pkg = \"SIBER\") %>% \n  separate_wider_delim(sample_name, cols_remove = FALSE,\n                       delim = \".\", names = c(\"community\",\n                                              \"group\")) %>%\n  left_join(cg_names)\n```\n:::\n\n\nNext we are going to extract posterior estimates of $\\Sigma$ using `extract_sigma()`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_sigma <- extract_sigma(ellipses_posterior, pkg = \"SIBER\")\n```\n:::\n\n\nLastly, we are going to feed each $\\mu$ and $\\Sigma$ estimate to `niche_ellipse()` to estimate each ellipse. There are few things to know about this function and they include the following: 1) it will randomly sample 10 ellipse from the total posterior distribution of $\\mu$ and $\\Sigma$, this seems quite standard, however, you can adjust the number of samples by changing the argument `n`. 2) to make the function consistently randomly sample the same set you will need to set `set_seed` to a numerical value. If this is not set then it will randomly sample a different set of 10 ellipses every time. 3) if you would like the function to not randomly sample set the argument `random` to `FALSE`. 4) by default it will tell you how long it takes to generate the ellipse and will have progress bars at each step. If you want to turn this off set `message` to `FALSE`. 5) if you are wanting to change the confidence level of the ellipse you can do so using the argument `p_ell`. This value is bound between 0 and 1. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_el <- niche_ellipse(dat_mu = df_mu_long,\n                       dat_sigma = df_sigma, \n                       set_seed = 4, n = 20) %>%\n  separate_wider_delim(sample_name, cols_remove = FALSE,\n                       delim = \".\", names = c(\"community\",\n                                              \"group\")) %>%\n  left_join(cg_names)\n```\n:::\n\n\nNow that we have the ellipses created we can plot them.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = df_el, \n       aes(x = d13c, y = d15n, \n           group = interaction(sample_number, \n                               sample_name), \n           colour = group_name)) + \n  geom_polygon(linewidth = 0.5, fill = NA) + \n  facet_wrap( ~ community_name) + \n  scale_colour_viridis_d(option = \"A\", begin = 0.25, end = 0.85,\n                         name = \"Groups\", alpha = 0.75) + \n  theme_bw(\n    base_size = 15\n  ) + \n  theme(\n    strip.background = element_blank(),\n    panel.grid = element_blank(), \n    legend.position = \"inside\",\n    axis.title = element_markdown(),\n    legend.background = element_blank(), \n    legend.position.inside = c(0.65, 0.75)\n  ) + \n  labs(\n    x = paste0(\"\\U03B4\",\"<sup>\", 13, \"</sup>\", \"C\", \" (‰)\"),\n    y = paste0(\"\\U03B4\",\"<sup>\", 15, \"</sup>\", \"N\", \" (‰)\")\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){width=100%}\n:::\n:::\n\n\n### Extract Niche Size \n\nWe can use `siberEllipses()` from {SIBER} to estimate niche size for each posterior sample for each community and group.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsea_b <- siberEllipses(corrected.posteriors = ellipses_posterior)\n```\n:::\n\n\nNext using `extract_niche_size()` from `{nichetools}` we can extract niche size which will also add in the correct names for the communities and groups we are working with. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nseb_convert <- extract_niche_size(data = sea_b,\n                                  pkg = \"SIBER\",\n                                  community_df = cg_names)\n```\n:::\n\n\nWe will also extract the parametric estimate for niche size using `groupMetricsML()` from `{SIBER}`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ngroup_ml <- groupMetricsML(siber_example)\n```\n:::\n\n\nWe can convert the output of this function using `extract_group_metrics()`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ngroup_convert <- extract_group_metrics(data = group_ml,\n                                       community_df = cg_names)\n```\n:::\n\n\nThe object returned will have maximum-likelihood estimates for the standard ellipse area (SEA), the central standard ellipse area (SEAc), and the total area (TA). For plotting niche size we will use `SEAc`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsea_c <- group_convert %>% \n  filter(metric == \"SEAc\")\n```\n:::\n\n\nLastly, we can visualize the extracted niche sizes using {ggplot2}. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_violin(data = seb_convert, aes(x = community_name,\n                                      y = sea,\n                                      fill = group_name)) + \n  scale_fill_viridis_d(option = \"A\", begin = 0.25, end = 0.85,\n                       name = \"Groups\", alpha = 0.75) + \n  geom_point(data = sea_c, aes(x = community_name, \n                               y = est, \n                               group = group_name,\n  ), \n  size = 2.5,\n  fill = \"white\",\n  shape = 21,\n  position = position_dodge(width = 0.9)) +\n  theme_bw(\n    base_size = 15\n  ) + \n  theme(\n    strip.background = element_blank(),\n    panel.grid = element_blank(), \n    legend.position = \"inside\",\n    legend.background = element_blank(), \n    legend.position.inside = c(0.85, 0.8)\n  ) + \n  labs(\n    x = \"Communities\", \n    y = expression(paste(\"Niche Size p(\", \"‰\"^2, \"| x)\"))\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-22-1.png){width=100%}\n:::\n:::\n\n\n\n### Niche Similarties \n\nNow that we have extracted Bayesian estimates of niche size we are likely wanting to know how much do these niches have in common or are similar. \n\nWe can use maximum-likelihood and Bayesian frameworks to estimate the percentage of similarity within communities between groups and/or among communities with groups being consistent. We can use functions in `{SIBER}` to create maximum-likelihood and Bayesian estimates of niche similarity followed by functions in `{nichetools}` to extract these similarities.\n\nFirst we need to create our comparisons that we are wanting to evaluate. We can use the function `create_comparisons()` to generate a list that has two-column data frames of each comparison. You can change the argument `comparison` to `\"among\"` to compare communities for the same group, versus `\"within\"` which compares groups within a community. \n\n::: {.cell}\n\n```{.r .cell-code}\ncg_names_within_com <- cg_names %>%\n  create_comparisons(comparison = \"within\")\n```\n:::\n\n\nNext we can feed this listed data frames to either `maxLikOverlap()` or `bayesianOverlap()` using `map()` from `{purrr}`. For this exercise I have not changed `.progress` argument of `map()` but when working with large data sets I often turn this argument to `TRUE` to provide a progress update. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nml_within_overlap <- cg_names_within_com %>%\n  map(~ maxLikOverlap(.x$cg_1, .x$cg_2, siber_example,\n                      p.interval = 0.95, n = 100))\n```\n:::\n\n\nNext we can extract estimates using `extract_similarities()` with the `type` argument set to `\"ml\"`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nml_95_within_com <- extract_similarities(ml_within_overlap, \n                                         type = \"ml\", \n                                         community_df = cg_names)\n```\n:::\n\n\nNow we will repeat the process for `bayesianOverlap()`, first supplying the function with our list of data frames, next having `map()` iterate over this list. \n\n::: {.cell}\n\n```{.r .cell-code}\nbayes95_overlap <- cg_names_within_com %>%\n  map(~ bayesianOverlap(.x$cg_1, .x$cg_2, ellipses_posterior,\n                        draws = 100, p.interval = 0.95,\n                        n = 100)\n  )\n```\n:::\n\n\nNext we can extract estimates using `extract_similarities()` with the `type` argument set to `\"bay\"`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nbays_95_overlap <- extract_similarities(bayes95_overlap, \n                                        type = \"bay\",\n                                        community_df = cg_names)\n```\n:::\n\n\n\nNow that we have extracted  maximum-likelihood and Bayesian estimates we can visualize them. \n\nPrior to creating a point interval plot, we need to create a colour palette that will be used to identify each community.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nviridis_colors_s <- viridis(4, begin = 0.25, end = 0.85,\n                          option = \"A\",\n                          alpha = 0.75\n)\n```\n:::\n\n\n\nNow we can use point interval plots to visually represent posterior distributions.  \n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() + \n  stat_pointinterval(data = bays_95_overlap,\n              aes(x = group_1, \n                  y = prop_overlap, \n                  point_fill = group_2), \n    interval_colour = \"grey60\",\n    point_size = 3,\n    shape = 21,\n    position = position_dodge(0.4)) + \n  \n  geom_point(data = ml_95_within_com, aes(x = group_1, \n                                   y = prop_overlap,\n                                   group = group_2), \n             shape = 21,\n             fill = \"white\",\n             size = 2,\n             alpha = 0.5, \n             position = position_dodge(0.4)) + \n  scale_fill_manual(name = \"Group\", \n                    aesthetics = \"point_fill\",\n                    values = viridis_colors_s) + \n  theme_bw(\n    base_size = 15\n  ) + \n  theme(\n    panel.grid = element_blank(),\n    strip.background = element_blank(),\n    legend.position = \"inside\",\n    legend.position.inside = c(0.15, 0.80),\n  ) +\n  labs(\n    x = \"Group\",\n    y = expression(paste(\"p(\", \"‰\", \"|X)\"))\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-29-1.png){width=100%}\n:::\n:::\n\n\n\n### Bayesian Estimates of Layman's Community Metrics\n\nFirst I highly recommend reading [Layman et al. 2007](https://esajournals.onlinelibrary.wiley.com/doi/abs/10.1890/0012-9658%282007%2988%5B42%3ACSIRPF%5D2.0.CO%3B2) to understand the six community metrics that will be estimating using a Bayesian framework in this section. \n\nTo create maximum-likelihood estimate of Layman's community metrics we first need to use `communityMetricsML()` from `{SIBER}`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncommunity_ml <- communityMetricsML(siber_example)\n```\n:::\n\n\n\nThen we can extract these estimates using `extract_layman()` with the `type` argument set to \n`\"ml\"`. The default for this argument is `\"bay\"`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlayman_ml <- extract_layman(community_ml, \n                            type = \"ml\", \n                            community_df = c_names)\n```\n:::\n\n\nTo create Bayesian estimates of Layman's community metrics we first need to use `extractPosteriorMeans()` from \n`{SIBER}` to extract posterior estimates of means for each community and group. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmu_post <- extractPosteriorMeans(siber_example, ellipses_posterior)\n```\n:::\n\n\nNext we need to use `bayesianLayman()` from `{SIBER}` and use our extracted posterior means to create Bayesian estimates for each community metric.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlayman_b <- bayesianLayman(mu.post = mu_post)\n```\n:::\n\n\nOnce we have created our Bayesian estimates for each community metric we can use `extract_layman()` to extract these estimates. The function will also create the variable `labels` which will first assign a new name to each community metric and secondly will reorder these names based on how these metrics are often viewed. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlayman_be <- extract_layman(layman_b, community_df = c_names)\n```\n:::\n\n\nPrior to creating a point interval plot, we need to create a colour palette that will be used to identify each community.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nviridis_colors <- viridis(2, begin = 0.25, end = 0.85,\n                          option = \"G\",\n                          alpha = 0.75\n)\n```\n:::\n\n\nLastly, we can visualize the distributions of the posterior estimates using `stat_pointinterval()` from {ggdist}. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() + \n  stat_pointinterval(\n    data = layman_be, aes(x = labels, \n                          y = post_est, \n                          point_fill = community_name),\n    point_size = 2.5,\n    interval_colour = \"grey60\",\n    position = position_dodge(0.4),\n    shape = 21\n  ) + \n  geom_point(data = layman_ml, aes(x = labels, \n                                   y = estimate,\n                                   group = community_name), \n             shape = 21,\n             fill = \"white\",\n             alpha = 0.5, \n             position = position_dodge(0.4)) + \n  scale_fill_manual(name = \"Community\", \n                    aesthetics = \"point_fill\",\n                    values = viridis_colors) + \n  theme_bw(\n    base_size = 15\n  ) + \n  theme(\n    panel.grid = element_blank(),\n    axis.text = element_markdown(),\n    legend.position = \"inside\",\n    legend.position.inside = c(0.88, 0.85),\n  ) +\n  labs(\n    x = \"Community Metrics\",\n    y = expression(paste(\"p(\", \"‰\", \"|X)\"))\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-36-1.png){width=100%}\n:::\n:::\n\n\n\nCongratulations, we have successfully used functions from `{SIBER}` to extract and visually represent trophic communities and niche size and similarities. If you something doesn't work/is confusing please reach out. ",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}