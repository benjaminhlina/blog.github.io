[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Blog",
    "section": "",
    "text": "Shortest Paths Within a Boundary\n\n\n\n\n\n\n\ncode\n\n\ntelemetry\n\n\nmovement\n\n\n\n\n\n\n\n\n\n\n\nMay 26, 2023\n\n\nBenjamin Hlina\n\n\n\n\n\n\n  \n\n\n\n\nTest example\n\n\n\n\n\n\n\nstable isotopes\n\n\ntrophic niche\n\n\nplotting\n\n\n\n\n\n\n\n\n\n\n\nMay 26, 2023\n\n\nBenjamin Hlina\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/post-with-code/shortest_path_example_gdistance.html",
    "href": "posts/post-with-code/shortest_path_example_gdistance.html",
    "title": "Shortest Paths Within a Boundary",
    "section": "",
    "text": "Our Objectives:\nThe purpose of this vignette is to create the shortest distance among acoustic telemetry receivers within a confined boundary such as a lake, river, delta, or oceanscape. This workflow can be adapted to find the distance between any two points within a confined boundary.\nYou can download and unzip this vignette using the following code:\n\ninstall.packages(\"usethis\")\nusethis::use_course(\"https://github.com/benjaminhlina/shortest_path_example/archive/refs/heads/master.zip\")\n\n\n\nStep 1: Load shapefile and receiver locations\nWe will first load all the packages we need, we will use {gdistance} to find the shortest paths, {sf} to find the distances of those shortest paths.\n\n# ---- load packages ----\n{\n  library(dplyr)\n  library(gdistance)\n  library(ggplot2)\n  library(here)\n  library(purrr)\n  library(raster)\n  library(readr)\n  library(sf)\n  library(sp)\n  library(tibble)\n  library(tidyr)\n  make_line &lt;- function(lon, lat, llon, llat) {\n    st_linestring(matrix(c(lon, llon, lat, llat), 2, 2))\n  }\n}\n\nWe will bring bring in our shapefile. For this vignette I will use Big Sissabagama Lake which is the lake I grew up fishing on in Wisconsin, USA. Please replace with the shapefile of your desired body of water.\n\nlake &lt;- st_read(dsn = here(\"Data\",\n                           \"shapefile\",\n                           \".\"),\n                layer = \"sissabagama_lake\")\n\nImportant that you convert to the correct UTM zone. For the vignette we are using UTM zone 15 N. Adjust your UTM zone accordingly.\n\nlake_utm &lt;- st_transform(lake, crs = 32615)\n\nCreate SpatialPloygonDataFrame we will use this to create a raster that will be a transition layer for paths to move across. We will use lake_utm as we need our raster layer in UTMs.\n\nlake_spd &lt;- as_Spatial(lake_utm)\n\nWe will then bring in our receiver locations. Replace rl_sum_sf with your receiver locations as a RDS or csv file type or whatever you use to document receiver locations.\n\nrl_sum_sf &lt;- read_rds(here(\"Data\",\n                           \"receiver locations\",\n                           \"rl_sum_sf.rds\"))\n\nConvert to UTMs for plotting purposes make sure you use the correct UTM zone.\n\nrl_sum_utm &lt;- st_transform(rl_sum_sf, crs = 32615)\n\n\n\nStep 2: Rasterize shapefile\nWe will first look at lake SpatialPointsDataFrame via plot, then determine the boundary box (bbox) and save it as an object called ext.\n\nplot(lake_spd)\n\n# determine the extent of the SpatialPointsDataFrame\next &lt;- extent(lake_spd)\n\n\nThen we will create the raster, it is important here to control the res argument as that will result in varied resolution. For the vignette I used a resolution of 5 which represents 5 m since we are using UTMs. Using a more fine-scale resolution such as 5 m can be computationally intensive so for large systems scale this value up.\n\ns &lt;- raster(lake_spd, res = 5)\n# remove and change NA values to fit within the extent\ns &lt;- rasterize(x = lake_spd, y = s, field = 1)\n\n# plot raster to make sure it looks appropriate\nplot(s)\n\n\nThe last step is to create the transition layer. Directions will be queens move of 16 spaces. If in a larger systems direction could be reduced from queens space to rook or king, 4 or 8 to reduce computational complexity and speed.\n\ntrans &lt;- transition(x = s, transitionFunction = mean, directions = 16)\n\n\n\nStep 3: Create every combination of paths for every receiver\nFirst we will convert receiver location sf object to a tibble with each location combination.\n\nprep_path &lt;- rl_sum_sf %&gt;%\n  mutate(\n    lon = st_coordinates(.)[,\"X\"],# grab lon\n    lat = st_coordinates(.)[,\"Y\"],# grab lat\n  ) %&gt;%  \n  st_drop_geometry() %&gt;% # drop sf \n  # once geometry removed create to and from lat longs \n  mutate(llon = lon,\n         llat = lat,\n         lonlat = paste0(lon, \",\", lat),\n         llonllat = paste0(llon, \",\", llat)) %&gt;%\n  dplyr::select(-lon, -lat, -llon, -llat) %&gt;%\n  expand(lonlat, llonllat) %&gt;% # expand for each to and from combo \n  separate(lonlat, c(\"lon\", \"lat\"), \",\") %&gt;%\n  separate(llonllat, c(\"llon\", \"llat\"), \",\") %&gt;%\n  mutate_if(is.character, function(x) as.numeric(x)) \n\nprep_path has all of the path combinations but we lose the names of the receivers and which paths go from one receiver to another. We are going to add that information back in by creating an object called rec_order\n\nrec_order &lt;- prep_path %&gt;%\n  left_join( \n    rl_sum_sf %&gt;% \n      mutate(\n        lon = st_coordinates(.)[,\"X\"], # grab lon \n        lat = st_coordinates(.)[,\"Y\"]  # grab lat \n      ) %&gt;% \n      st_drop_geometry() %&gt;% # remove sf \n      rename(from = rec_name) %&gt;%  # Line up from names \n      dplyr::select(from, lon, lat), by = c(\"lon\", \"lat\"), \n    multiple = \"all\"\n  ) %&gt;%  \n  left_join(\n    rl_sum_sf %&gt;% \n      mutate(\n        lon = st_coordinates(.)[,\"X\"]\n      ) %&gt;% \n      st_drop_geometry() %&gt;% \n      rename(to = rec_name,\n             llon = lon) %&gt;% # join for the tos  \n      dplyr::select(to, llon), by = c(\"llon\"), \n    multiple = \"all\"\n  ) %&gt;% \n  mutate(\n    from_to = paste0(from, \"-\", to), \n    id = 1:nrow(.)\n  ) %&gt;% \n  dplyr::select(id, from, to, from_to, lon, lat, llon, llat)\n\nAwesome! We have all of our combinations with their names and we now know which paths go from one receiver to another. The only issue is all of points are in decimal degrees with a CRS of WGS 84, we need to convert this into to UTMs.\nBe sure to choose the correct UTM zone here. This vignette uses UTM zone 15 north but for other uses you will have to change the UTM zone.\n\nrec_order_utm &lt;- st_as_sf(rec_order, \n                          coords = c(\"lon\", \"lat\"), \n                          crs = st_crs(rl_sum_sf)) %&gt;% \n  st_transform(crs = 32615) %&gt;% \n  mutate(\n    lon = st_coordinates(.)[,\"X\"], # grab lon \n    lat = st_coordinates(.)[,\"Y\"]  # grab lat \n  ) %&gt;% \n  st_drop_geometry() %&gt;% \n  st_as_sf(., coords = c(\"llon\", \"llat\"), \n           crs = st_crs(rl_sum_sf)) %&gt;% \n  st_transform(crs = 32615) %&gt;% \n  mutate(\n    llon = st_coordinates(.)[,\"X\"], # grab lon \n    llat = st_coordinates(.)[,\"Y\"]  # grab lat \n  ) %&gt;% \n  st_drop_geometry()\n\n\n\nStep 4: Make shortest paths\nWe will first split our combinations into individual end points, then we will use purrr::map() to iterate over each combination and use the shortestPath() function to calculate the shortest path for every combination.\nWe then will transform the output of this which are SpatialLinesDataFrame to sf objects. Important note here is to change the CRS to your specific CRS UTM zone.\n\nrec_dist_sf &lt;- rec_order_utm %&gt;%\n  split(.$id) %&gt;%\n  map(possibly(~ shortestPath(trans,\n                              c(.$llon, .$llat),\n                              c(.$lon, .$lat),\n                              output = \"SpatialLines\"), NA)) %&gt;%\n  map(possibly(~ st_as_sf(., crs = 32615), NA)) %&gt;% # u will need to replace CRS\n  bind_rows(.id = \"id\") %&gt;%\n  mutate(\n    cost_dist = as.numeric(st_length(.))\n  )\n\n\n\nStep 5: Add in metadata of paths start and end desitantions\nFirst we will change the id column to a character to be able to line up the data properly.\n\nrec_order_names &lt;- rec_order_utm %&gt;% \n  mutate(\n    id = as.character(id)\n  )\n\nNext we will us left_join() from {dplyr} to connect each path’s metadata.\n\nrec_dist_sf &lt;- rec_dist_sf %&gt;% \n  left_join(rec_order_names, by = \"id\") %&gt;% \n  dplyr::select(id, from:llon, cost_dist, geometry)\n\n\n\nStep 6: Plot\nWe will use ggplot to look at our paths. Lets first check if paths go to the right locations. Then we will plot the whole thing\n\nggplot() +\n  geom_sf(data = lake_utm) +\n  geom_sf(data = rec_dist_sf %&gt;% \n            filter(from_to %in% \"3-12\")\n          , aes(colour = cost_dist), size = 1) +\n  geom_sf_label(data = rl_sum_utm , size = 4, aes(label = rec_name)) +\n  scale_colour_viridis_c(name = \"Cost Distance (m)\", option = \"B\") +\n  theme_void()\n\n\n\nggplot() +\n  geom_sf(data = lake_utm) +\n  geom_sf(data = rec_dist_sf, aes(colour = cost_dist), size = 1) +\n  geom_sf(data = rl_sum_utm , size = 4) +\n  scale_colour_viridis_c(name = \"Cost Distance (m)\", option = \"B\") +\n  theme_void()\n\n From here the sf object can be kept together or ripped apart to determine the distance or path a fish could swim within the system along with a whole host of other potential implications (e.g. interpolated paths).\nCredit: R. Lennox, PhD, Science Director - OTN for the original ideas around this script."
  },
  {
    "objectID": "posts/post-with-code/test_blog.html",
    "href": "posts/post-with-code/test_blog.html",
    "title": "Test example",
    "section": "",
    "text": "test &lt;- 1 + 1 \nprint(test)\n\ntest + 5 \ntest + 8"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "I am a fisheries scientist and programmer currently based at the Fish Ecology and Conservation Physiology Laboratory, Carleton University, Ottawa, ON, CA. This blog is an extension of my website and is where I host vignettes mostly in R on a wide range of topics mostly focused on data applications for aquatic scientist."
  }
]