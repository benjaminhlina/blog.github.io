{
  "hash": "162f89340177ce524bf43b45f3218d7e",
  "result": {
    "markdown": "---\ntitle: \"Shortest Paths Within a Boundary - {pathroutr}\"\nauthor: \"Benjamin Hlina\"\ndate: \"2023-05-28\"\ncategories: [code, telemetry, movement]\nimage: \"7_big_sissabagama_rerouted_paths.png\"\nexecute:\n  eval: FALSE\n---\n\n\n### Our Objectives:\n\nThe purpose of this vignette is to create the shortest distance among acoustic telemetry receivers within a confined boundary such as a lake, river, delta, or oceanscape. This workflow can be adapted to find the distance between any two points within a confined boundary.\n\nUse this vignette with a bit of caution, as I found some inconsistency with this method when transferring it to other study systems besides this example study system.\n\nNote, this method differs from the {gdistance} method as we are going to create a network graph to move throughout our study system and determine the shortest path. This vignette will start off the same as the {gdistance} method but will differ when creating the shortest paths. \n\n\n\nYou can download and unzip this vignette using the following code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"usethis\")\nusethis::use_course(\"https://github.com/benjaminhlina/shortest_path_example/archive/refs/heads/master.zip\")\n```\n:::\n\n\n### Step 1: Load shapefile and receiver locations\n\nWe will first load all the packages we need, we will use [{pathroutr}](https://jmlondon.github.io/pathroutr/) to find the shortest paths using [{sfnetworks}](https://luukvdmeer.github.io/sfnetworks/) and  [{sf}](https://r-spatial.github.io/sf/) to find the distances of those shortest paths.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ---- load packages ----\n{\n  library(dplyr)\n  library(ggplot2)\n  library(ggspatial)\n  library(here)\n  library(igraph)\n  library(lwgeom)\n  library(pathroutr)\n  library(purrr)\n  library(readr)\n  library(sf)\n  library(sfnetworks)\n  library(sp)\n  library(tibble)\n  library(tidyr)\n  make_line <- function(lon, lat, llon, llat) {\n    st_linestring(matrix(c(lon, llon, lat, llat), 2, 2))\n  }\n}\n```\n:::\n\n\nWe will bring bring in our shapefile. This vignette will use Big Sissabagama Lake as it is the lake I grew up fishing on in Wisconsin, USA. Please replace with the shapefile of your desired body of water.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlake <- st_read(dsn = here(\"Data\",\n                           \"shapefile\",\n                           \".\"),\n                layer = \"sissabagama_lake\")\n```\n:::\n\n\nImportant that you convert to the correct UTM zone. For the vignette we are using UTM zone 15 N. Adjust your UTM zone accordingly.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlake_utm <- st_transform(lake, crs = 32615)\n```\n:::\n\n\nWe will then bring in our receiver locations. Replace `rl_sum_sf` with your receiver locations as a RDS or csv file type or whatever you use to document receiver locations.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrl_sum_sf <- read_rds(here(\"Data\",\n                           \"receiver locations\",\n                           \"rl_sum_sf.rds\"))\n```\n:::\n\n\nConvert to UTMs for plotting purposes and make sure you use the correct UTM zone.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrl_sum_utm <- st_transform(rl_sum_sf, crs = 32615)\n```\n:::\n\n\n### Step 2: Invert shapefile for inland lakes and rivers\n\n`{pathroutr}` was built with the intent of working on oceanscapes where the shapefile is land. For inland bodies of water the shapefile is usually water, therefore to get `{pathroutr}` to function we need to invert our inland lake or river shapefile \n\nFirst we are going to get the extent of our shapefile which will be in UTMs\n\n::: {.cell}\n\n```{.r .cell-code}\next <- st_bbox(lake_utm, crs = st_crs(lake_utm)) %>%\n  st_as_sfc() %>%\n  st_sf()\n```\n:::\n\n\nWe then will invert our shapefile by using `st_difference()` from `{sf}`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ninverse <- st_difference(ext, lake_utm)\n```\n:::\n\n\nWe will check if we have correctly taken the inverse of our lake.\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_sf(data = inverse) + \n  theme_void()\n```\n:::\n\n![](1_big_sissabagama_lake_inverse.png)\n\n### Step 3: Create land region to build our network\n\nWe need to create a buffered land region to use as a barrier. Within `st_buffer()` we will need to adjust `dist` argument to change the buffer distance to be adequate for the study system. For this example we will use 650 m. \n\n::: {.cell}\n\n```{.r .cell-code}\nland_region <- rl_sum_utm %>% \n  st_buffer(dist = 650) %>%\n  st_union() %>%\n  st_convex_hull() %>% \n  st_intersection(inverse) %>% \n  st_sf()\n```\n:::\n\n\nWe will check if we have correctly buffered our land region\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_sf(data = land_region) + \n  theme_void()\n```\n:::\n\n![](2_big_sissabagama_lake_buffer.png)\n\n### Step 4: Create every combination of paths for every receiver\n\nFirst we will convert receiver location which is a `sf object` to a `tibble` with each location combination.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprep_path <- rl_sum_sf %>%\n  mutate(\n    lon = st_coordinates(.)[,\"X\"],# grab lon\n    lat = st_coordinates(.)[,\"Y\"],# grab lat\n  ) %>%  \n  st_drop_geometry() %>% # drop sf \n  # once geometry removed create to and from lat longs \n  mutate(llon = lon,\n         llat = lat,\n         lonlat = paste0(lon, \",\", lat),\n         llonllat = paste0(llon, \",\", llat)) %>%\n  dplyr::select(-lon, -lat, -llon, -llat) %>%\n  expand(lonlat, llonllat) %>% # expand for each to and from combo \n  separate(lonlat, c(\"lon\", \"lat\"), \",\") %>%\n  separate(llonllat, c(\"llon\", \"llat\"), \",\") %>%\n  mutate_if(is.character, function(x) as.numeric(x)) \n```\n:::\n\n\n`prep_path` has all of the path combinations but we lose the names of the receivers and which paths go from one receiver to another. We are going to add that information back in by creating an object called `rec_order`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrec_order <- prep_path %>%\n  left_join(\n    rl_sum_sf %>% \n      mutate(\n        lon = st_coordinates(.)[,\"X\"], \n        lat = st_coordinates(.)[,\"Y\"]\n      ) %>% \n      st_drop_geometry() %>% \n      rename(from = rec_name) %>% \n      select(from, lon, lat), by = c(\"lon\", \"lat\"), \n    multiple = \"all\"\n  ) %>%  \n  left_join(\n    rl_sum_sf %>% \n      mutate(\n        lon = st_coordinates(.)[,\"X\"]\n      ) %>% \n      st_drop_geometry() %>% \n      rename(to = rec_name,\n             llon = lon) %>% \n      select(to, llon), by = c(\"llon\"), \n    multiple = \"all\"\n  ) %>% \n  mutate(\n    from_to = paste0(from, \"-\", to)\n  ) %>% \n  select(from, to, from_to, lon, lat, llon, llat)\n```\n:::\n\nAwesome! We have all of our combinations with their names and we now know which paths go from one receiver to another. Now we need to make each combination a linestring that we will sample points from to reroute. \n\nBe sure to choose the correct UTM zone here. This vignette uses UTM zone 15 north but for other uses you will have to change the UTM zone.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npath <- prep_path %>%\n  pmap(make_line) %>%\n  st_as_sfc(crs = 4326) %>%\n  st_sf() %>%  \n  mutate(\n    lon = st_startpoint(.) %>%\n      st_coordinates(.) %>%\n      as_tibble() %>%\n      .$X,\n    llon = st_endpoint(.) %>%\n      st_coordinates(.) %>%\n      as_tibble() %>%\n      .$X\n  ) %>% \n  left_join( rec_order %>%\n               select(from:lon, llon),\n             by = c(\"lon\", \"llon\")\n  ) %>%\n  select(from:from_to) %>% \n  st_transform(crs = 32615) %>% \n  arrange(from, to)\n```\n:::\n\n\n### Step 5: sample points along path for {pathroutr} to reroute\nNow that we have our paths we need to sample along the `LINESTRING` to get paths to reroute. I choose to have a sample distance of 5 m but you can change this depending on the study site.\n\nWe need to cast our sampled points as `MULTIPOINT` object for `{pathroutr}` to sample\n\n\n::: {.cell}\n\n```{.r .cell-code}\npath_pts <- path %>% \n  st_segmentize(dfMaxLength = units::set_units(5, m)) %>% \n  st_cast(\"MULTIPOINT\")\n```\n:::\n\n\nImportant note, sometimes this sampling step results in points that intersect with the boundary of your land region which may cause issues with `{pathroutr}`. To fix this you will need to use the following code: \n\n\n::: {.cell}\n\n```{.r .cell-code}\npath_pts_fix <- prt_trim(trkpts = path_pts, barrier = land_region)\n```\n:::\n\n\nThough for this vignette we will not use `path_pts_fix`. \n\nWe are going to visualize our `paths`, we could visualize the `path_pts` but this often takes awhile to process as the sample interval is 5 m and `path_pts` will be taken from our `paths`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() + \n  geom_sf(data = land_region)  +\n  geom_sf_label(data = rl_sum_sf, aes(label = rec_name), \n                size = 4) +\n  geom_sf(data = path, linewidth = 1) + \n  theme_void()\n```\n:::\n\n![](3_big_sissabagama_lake_paths.png)\n\n### Step 6: Use `get_barrier_segments` from `{pathroutr}` to id path points that travel across landmasses in our lake. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlake_bar_seg <- get_barrier_segments(trkpts = path_pts,\n                                     barrier =  land_region)\n```\n:::\n\n\n### Step 7: Create network graph in our study system \n\nCreate a network graph that is bound by `land_region` and made up  Delaunay triangles which are created in theory by looking from one point on one shore to directly across the study system until you hit a land object.  \n\n::: {.cell}\n\n```{.r .cell-code}\nvis <- prt_visgraph(barrier = land_region)\n```\n:::\n\n\nWe can manipulate our network graph in several ways, the first is supplying the argument `aug_points` with the receiver location `sf object`. By doing so we add in triangles that will directly go to our receiver locations. However if you want to use this feature please install the forked version of [{pathroutr}](https://github.com/benjaminhlina/pathroutr) using the following code, as the original source currently does not support this feature. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"devtools\")\ndevtools::install_github(\"benjaminhlina/pathroutr\")\n```\n:::\n\nSecondly, we can use the argument `centroids` to add additional points within our network. \n\nLastly, we can use the argument `buffer` to have paths be buffered from our land masses by a given distance in metres. \nWe can visualize our network by first using the function `activate` from `{sfnetworks}`. \n\n::: {.cell}\n\n```{.r .cell-code}\nvis_graph_sf <- activate(vis, \"edges\") %>% \n  st_as_sf()\n\nggplot() + \n  geom_sf(data = vis_graph_sf) + \n  theme_void()\n```\n:::\n\n![](4_big_sissabagama_lake_network.png)\n\n\n### Step 8: Create rerouted sections \nUsing `prt_shortestpath` we will reroute sections that go across land using our created network. \n\n::: {.cell evalu='false'}\n\n```{.r .cell-code}\nsegs_tbl <- prt_shortpath(lake_bar_seg, vis, blend = TRUE)\n```\n:::\n\n\nWe can visualize these rerouted paths \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() + \n  geom_sf(data = land_region, size = 0) +\n  layer_spatial(data = segs_tbl$geometry, \n                color = \"deepskyblue3\",\n                linewidth = 1) +\n  theme_void()\n```\n:::\n\n![](5_big_sissabagama_lake_reroute.png)\n\n### Step 9: Update our paths to not travel across land \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrack_pts_fix <- prt_reroute(path_pts, land_region, vis)\n\ntrack_pts_fix <- prt_update_points(track_pts_fix, path_pts)\n```\n:::\n\n\n### Step 10: Convert points to linestrings to determine distance\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrack_pts_fixed <- track_pts_fix %>% \n  group_by(from_to) %>% \n  summarise(do_union = FALSE) %>% \n  st_cast('LINESTRING') %>%  \n  ungroup() %>% \n  separate(from_to, into = c(\"from\", \"to\"), sep = \"-\", \n           remove = FALSE) %>% \n  mutate(\n    cost_dist_m = as.numeric(st_length(.))\n  ) %>% \n  filter(from != to) %>% \n  dplyr::select(from, to, from_to, cost_dist_m, geometry)\n```\n:::\n\n\n### Step 11: Visualize our paths \n\nFirst we will check if one route rerouted properly \n\n::: {.cell}\n\n```{.r .cell-code}\n# view one reroute to confirm pathroutr is rerouting \ntrack_pts_fixed %>% \n  filter(from_to == \"15-11\") %>% \n  ggplot() + \n  geom_sf(data = land_region, size = 0) +\n  geom_sf(color = \"deepskyblue3\", \n          linewidth = 1) +\n  theme_void()\n```\n:::\n\n![](6_big_sissabagama_rerouted_path.png)\n\nNext we will visualize the whole network and have colour be our distances\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() + \n  geom_sf(data = lake_utm, colour = \"black\",\n          size = 1) +\n  geom_sf(data = rl_sum_utm, \n          size = 4, colour = \"black\") + \n  geom_sf(data = track_pts_fixed, \n          aes(color = cost_dist_m), \n          linewidth = 1) +\n  scale_colour_viridis_c(option = \"D\", \n                         name = \"Cost Distance (m)\") + \n  theme_void()\n```\n:::\n\n![](7_big_sissabagama_rerouted_paths.png)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}